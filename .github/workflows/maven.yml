name: order-service CI/CD Flow

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
  SI_CLUSTER: lugx
  SI_ZONE: us-central1
  DEPLOYMENT_NAME: order-service
  IMAGE: order-service
  TAG: prod
  NAMESPACE: lugx

jobs:
  ci-cd-pipeline:
    name: CI/CD Pipeline
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Java and build the application
      - name: Build Application
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Build Application with Maven
        run: mvn clean install -DskipTests

      # Set up Google Cloud CLI and authenticate
      - name: Set up Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}

      - name: Get Cluster Credentials and Docker
        run: |
          echo "PROJECT_ID=${{ env.PROJECT_ID }}"
          gcloud auth configure-docker --quiet
          gcloud container clusters get-credentials "${{ env.SI_CLUSTER }}" --zone "${{ env.SI_ZONE }}" --project "${{ env.PROJECT_ID }}"

      - name: Install Gcloud Auth Component
        run: |-
          gcloud components install gke-gcloud-auth-plugin    

      # Build Docker image, push it to GCR, and deploy to GKE
      - name: Build, Push, and Deploy
        run: |
          # Build and push Docker image
          docker build -t "gcr.io/$PROJECT_ID/$IMAGE:$TAG" .
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"

          # Create namespace if not exists
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE

          # Deploy to GKE
          kubectl apply -n $NAMESPACE -f deployment.yaml
          kubectl rollout restart -n $NAMESPACE deployment "$DEPLOYMENT_NAME"

      # deployment tests and verification
#      - name: Deployment Tests and Verification
#        run: |
#          echo "Running Health check Tests..."
#          curl --fail http:///api/order-service/actuator/health || exit 1
#
#          echo "Verifying Deployment..."
#          kubectl get services -n $NAMESPACE -o wide
